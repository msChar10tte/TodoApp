name: CI/CD Pipeline for TodoApp

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: todoapp
      DOCKER_REGISTRY: docker.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven and skip tests
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Notify on build and push result
        run: echo "Docker image build and push completed successfully!"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker # Этот job зависит от успешного завершения предыдущего
    environment: production # Опционально: можно использовать окружения GitHub Actions
    env:
      # Замените на реальные данные вашей ВМ
      VM_HOST: your_vm_ip_address # IP адрес вашей ВМ
      VM_USER: your_ssh_username # Имя пользователя для SSH
      IMAGE_NAME: todoapp
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Ваш Docker Hub логин

    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Logging into Docker Hub on VM..."
            docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            
            echo "Pulling latest Docker image..."
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            
            echo "Stopping existing container (if any)..."
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true
            
            echo "Running new container..."
            docker run -d --name ${{ env.IMAGE_NAME }} -p 80:8080 ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            
            echo "Checking container status..."
            docker ps -a
            echo "Deployment complete!"